# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import gamepad_pb2 as gamepad__pb2


class GamepadStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.InitService = channel.unary_unary(
        '/grpc_client.Gamepad/InitService',
        request_serializer=gamepad__pb2.msg_creq_StartConnection.SerializeToString,
        response_deserializer=gamepad__pb2.msg_sres_StartConnection.FromString,
        )
    self.TestConnection = channel.unary_unary(
        '/grpc_client.Gamepad/TestConnection',
        request_serializer=gamepad__pb2.msg_Ping.SerializeToString,
        response_deserializer=gamepad__pb2.msg_Ping.FromString,
        )
    self.ButtonEvent = channel.unary_unary(
        '/grpc_client.Gamepad/ButtonEvent',
        request_serializer=gamepad__pb2.msg_creq_ButtonEventTransfer.SerializeToString,
        response_deserializer=gamepad__pb2.msg_sres_ButtonEventTransfer.FromString,
        )
    self.TransmitLS = channel.stream_stream(
        '/grpc_client.Gamepad/TransmitLS',
        request_serializer=gamepad__pb2.str_creq_LeftStickTransfer.SerializeToString,
        response_deserializer=gamepad__pb2.str_sres_LeftStickTransfer.FromString,
        )
    self.TransmitRS = channel.stream_stream(
        '/grpc_client.Gamepad/TransmitRS',
        request_serializer=gamepad__pb2.str_creq_RightStickTransfer.SerializeToString,
        response_deserializer=gamepad__pb2.str_sres_RightStickTransfer.FromString,
        )
    self.TransmitLT = channel.stream_stream(
        '/grpc_client.Gamepad/TransmitLT',
        request_serializer=gamepad__pb2.str_creq_LeftTriggerTransfer.SerializeToString,
        response_deserializer=gamepad__pb2.str_sres_LeftTriggerTransfer.FromString,
        )
    self.TransmitRT = channel.stream_stream(
        '/grpc_client.Gamepad/TransmitRT',
        request_serializer=gamepad__pb2.str_creq_RightTriggerTransfer.SerializeToString,
        response_deserializer=gamepad__pb2.str_sres_RightTriggerTransfer.FromString,
        )


class GamepadServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def InitService(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TestConnection(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ButtonEvent(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TransmitLS(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TransmitRS(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TransmitLT(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TransmitRT(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GamepadServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'InitService': grpc.unary_unary_rpc_method_handler(
          servicer.InitService,
          request_deserializer=gamepad__pb2.msg_creq_StartConnection.FromString,
          response_serializer=gamepad__pb2.msg_sres_StartConnection.SerializeToString,
      ),
      'TestConnection': grpc.unary_unary_rpc_method_handler(
          servicer.TestConnection,
          request_deserializer=gamepad__pb2.msg_Ping.FromString,
          response_serializer=gamepad__pb2.msg_Ping.SerializeToString,
      ),
      'ButtonEvent': grpc.unary_unary_rpc_method_handler(
          servicer.ButtonEvent,
          request_deserializer=gamepad__pb2.msg_creq_ButtonEventTransfer.FromString,
          response_serializer=gamepad__pb2.msg_sres_ButtonEventTransfer.SerializeToString,
      ),
      'TransmitLS': grpc.stream_stream_rpc_method_handler(
          servicer.TransmitLS,
          request_deserializer=gamepad__pb2.str_creq_LeftStickTransfer.FromString,
          response_serializer=gamepad__pb2.str_sres_LeftStickTransfer.SerializeToString,
      ),
      'TransmitRS': grpc.stream_stream_rpc_method_handler(
          servicer.TransmitRS,
          request_deserializer=gamepad__pb2.str_creq_RightStickTransfer.FromString,
          response_serializer=gamepad__pb2.str_sres_RightStickTransfer.SerializeToString,
      ),
      'TransmitLT': grpc.stream_stream_rpc_method_handler(
          servicer.TransmitLT,
          request_deserializer=gamepad__pb2.str_creq_LeftTriggerTransfer.FromString,
          response_serializer=gamepad__pb2.str_sres_LeftTriggerTransfer.SerializeToString,
      ),
      'TransmitRT': grpc.stream_stream_rpc_method_handler(
          servicer.TransmitRT,
          request_deserializer=gamepad__pb2.str_creq_RightTriggerTransfer.FromString,
          response_serializer=gamepad__pb2.str_sres_RightTriggerTransfer.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpc_client.Gamepad', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
